swagger: '2.0'
info:
  description: Todo API.
  version: 1.0.0
  title: Pttnores Todo API
  contact:
    email: pttnores@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: pttnores-todo-api.herokuapp.com
basePath: /
tags:
  - name: todos
    description: Everything about your todos
    externalDocs:
      description: Find out more
      url: 'http://jose-nores.com/todo-api'
schemes:
  - https
paths:
  /todos:
    get:
      tags:
        - todo
      summary: List of todos
      description: ''
      operationId: getTodos
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: completed
          type: boolean
          description: Filter by completed status
          required: false
        - in: query
          name: q
          type: string
          description: 'Filter by Description '
          required: false
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Todo'
        '304':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Todo'
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
    post:
      tags:
        - todo
      summary: Creates a todo
      description: ''
      operationId: create Todo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New todo
          required: true
          schema:
            $ref: '#/definitions/TodoCreate'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Todo'
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
  '/todos/{todoId}':
    get:
      tags:
        - todo
      summary: Find todo by ID
      description: Returns a single todo
      operationId: gettodoById
      produces:
        - application/json
      parameters:
        - name: todoId
          in: path
          description: ID of todo to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
      security:
        - api_key: []
    put:
      tags:
        - todo
      summary: Update an existing todo
      description: ''
      operationId: updateTodo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: todoId
          in: path
          description: ID of todo that needs to be updated
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: todo object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/TodoUpdate'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
    delete:
      tags:
        - todo
      summary: Deletes a todo
      description: ''
      operationId: deletetodo
      produces:
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: todoId
          in: path
          description: todo id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: 'successful operation, deleted todo'
          schema:
            $ref: '#/definitions/Todo'
        '400':
          description: Invalid ID supplied
        '404':
          description: todo not found
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
  /users:
    get:
      tags:
        - user
      summary: List of users
      description: ''
      operationId: getUsers
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
          description: Search by email
          required: false
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '304':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:users'
            - 'read:users'
    post:
      tags:
        - user
      summary: Creates a user
      description: ''
      operationId: create User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New user
          required: true
          schema:
            $ref: '#/definitions/UserCreate'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '405':
          description: Invalid input
      security:
        - todostore_auth:
            - 'write:todos'
            - 'read:todos'
  '/users/{userId}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUseryId
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Update an existing user
      description: ''
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: user object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
      security:
        - todostore_auth:
            - 'write:users'
            - 'read:users'
  delete:
    tags:
      - user
    summary: Deletes a user
    description: ''
    operationId: deleteUser
    produces:
      - application/json
    parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: userId
        in: path
        description: user id to delete
        required: true
        type: integer
        format: int64
    responses:
      '200':
        description: 'successful operation, deleted user'
        schema:
          $ref: '#/definitions/User'
      '400':
        description: Invalid ID supplied
      '404':
        description: user not found
    security:
      - todostore_auth:
          - 'write:users'
          - 'read:users'

securityDefinitions:
  todostore_auth:
    type: oauth2
    authorizationUrl: 'http://todostore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:todos': modify todos in your account
      'read:todos': read your todos
      'write:users': modify users in your account
      'read:users': read your users
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  TodoUpdate:
    type: object
    properties:
      description:
        type: string
        example: Wash my hands
      completed:
        type: boolean
        description: todo status in the store
  TodoCreate:
    allOf:
    - $ref: '#/definitions/TodoUpdate'
    - type: object
      properties:
        id:
          type: integer
          format: int32
      required:
      - description
  Todo:
    allOf:
    - $ref: '#/definitions/TodoCreate'
    - type: object
      required:
        - id
        - description
        - completed
  UserCreate:
    type: object
    properties:
      email:
        type: string
        example: a@email.com
      password:
        type: string
        description: todo status in the store
    required:
      - email
      - password
  User:
    allOf:
    - $ref: '#/definitions/UserCreate'
    - type: object
      properties:
        id:
          type: integer
          format: int32
      required:
        - id
        - email
